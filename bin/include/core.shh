IsVarSet()
{
    eval "[ \"\${${1}+isset}\" = 'isset' ]"
}

AssignAtVar()
{
    eval "${1#@}=\"\${2}\""
}

Out()
{
    local s="${1}"
    local out=''

    local useColors=true
    if [ ! -t 1 ] || IsVarSet NO_COLOR; then # || IsVarSet ANSI_COLORS_DISABLED
        useColors=false
    fi

    while :; do
        local suffix="${s#*<}"
        if [ ${#suffix} = ${#s} ]; then # '<' not found
            break
        fi

        local tag="${suffix%%>*}"
        if [ ${#tag} = ${#suffix} ]; then # '>' not found
            break
        fi

        local idxHead=0
        idxHead=$(( ${#suffix} + 1 ))
        out+="${s:0:-${idxHead}}"

        if ${useColors}; then
            case "${tag}" in
                'reset'|'/reset' ) out+="${SGR0}" ;;

                'black'   ) out+="${BLACK}"   ;;
                'red'     ) out+="${RED}"     ;;
                'green'   ) out+="${GREEN}"   ;;
                'yellow'  ) out+="${YELLOW}"  ;;
                'blue'    ) out+="${BLUE}"    ;;
                'magenta' ) out+="${MAGENTA}" ;;
                'cyan'    ) out+="${CYAN}"    ;;
                'white'   ) out+="${WHITE}"   ;;

                '/black'   ) out+="${DEFAULT_FG}" ;;
                '/red'     ) out+="${DEFAULT_FG}" ;;
                '/green'   ) out+="${DEFAULT_FG}" ;;
                '/yellow'  ) out+="${DEFAULT_FG}" ;;
                '/blue'    ) out+="${DEFAULT_FG}" ;;
                '/magenta' ) out+="${DEFAULT_FG}" ;;
                '/cyan'    ) out+="${DEFAULT_FG}" ;;
                '/white'   ) out+="${DEFAULT_FG}" ;;

                'black_bg'   ) out+="${BLACK_BG}"   ;;
                'red_bg'     ) out+="${RED_BG}"     ;;
                'green_bg'   ) out+="${GREEN_BG}"   ;;
                'yellow_bg'  ) out+="${YELLOW_BG}"  ;;
                'blue_bg'    ) out+="${BLUE_BG}"    ;;
                'magenta_bg' ) out+="${MAGENTA_BG}" ;;
                'cyan_bg'    ) out+="${CYAN_BG}"    ;;
                'white_bg'   ) out+="${WHITE_BG}"   ;;

                '/black_bg'   ) out+="${DEFAULT_BG}" ;;
                '/red_bg'     ) out+="${DEFAULT_BG}" ;;
                '/green_bg'   ) out+="${DEFAULT_BG}" ;;
                '/yellow_bg'  ) out+="${DEFAULT_BG}" ;;
                '/blue_bg'    ) out+="${DEFAULT_BG}" ;;
                '/magenta_bg' ) out+="${DEFAULT_BG}" ;;
                '/cyan_bg'    ) out+="${DEFAULT_BG}" ;;
                '/white_bg'   ) out+="${DEFAULT_BG}" ;;

                'b' ) out+="${TEXT_BOLD_ON}"  ;;
                '/b') out+="${TEXT_BOLD_OFF}" ;;

                'u' ) out+="${TEXT_UNDERLINED_ON}"  ;;
                '/u') out+="${TEXT_UNDERLINED_OFF}" ;;

                'blink' ) out+="${TEXT_BLINK_ON}"  ;;
                '/blink') out+="${TEXT_BLINK_OFF}" ;;

                'so' ) out+="${TEXT_STANDOUT_ON}"  ;;
                '/so') out+="${TEXT_STANDOUT_OFF}" ;;
            esac
        fi

        local idxTail=0
        idxTail=$(( ${#suffix} - ${#tag} - 1 ))
        if [ ${idxTail} -eq 0 ]; then # '>' is the latest char in the input string
            s=''
            break
        fi

        s="${s:(-${idxTail})}"
    done

    out+="${s}"

    out="${out//&lt;/<}" 
    out="${out//&gt;/>}" 
    out="${out//&amp;/&}" 

    printf '%b' "${out}"
}

# OutFmt()
# {
#     ???
# }

Echo()
{
    Out "$*\n"
}

DieRcFmt()
{
    local res="${1:?}"
    local fmt="${2:?}"

    if [ ! "${res}" -eq "${res}" ] 2>/dev/null; then
        DieFatal "illegal number '${res}' is used as exit code"
    fi

    local lvlTxt='ERROR'
    if [ "${res}" -lt 0 ]; then
        lvlTxt='FATAL'
        res=$((-${res}))
    elif [ "${res}" -eq 0 ]; then
        lvlTxt='WARNING'
    fi

    if [ "${res}" -lt 0 ] || [ "${res}" -gt 255 ]; then
        DieFatal "exit code '${res}' must be in interval [0; 255]"
    fi

    shift
    shift

    printf "\n%s: ${lvlTxt}: ${fmt}\n\n" "$0" "$*" 1>&2
    # OutFmt "\n%s: <b><red>${lvlTxt}:<red></b> ${fmt}\n\n" "$0" "$*" 1>&2

    if [ ${res} -ne 0 ]; then
        exit ${res}
    fi
}

DieRc()
{
    local res="${1:?}"
    shift
    DieRcFmt "${res}" "%s" "$@"
}

DieFmt()
{
    local fmt="${1:?}"
    shift
    DieRcFmt 1 "${fmt}" "$@"
}

Die()
{
    DieRc 1 "$@"
}

Warn()
{
    DieRc 0 "$@"
}

Fatal()
{
    DieRc -1 "$@"
}

Function()
{
    local fn="${1:?}"

    if type "${fn}" | grep -Fiq 'function'; then
        Fatal "'${fn}' is already defined as function name"
    fi

    eval "${fn}()
    {
        local fn='${fn}'
        Fatal \"call to undefined function '\${fn}'\"
    }"
}
