Include 'colors'

IsVarSet() # checks if the variable is defined (or 'set' in term of SHELL)
{
    eval "[ \"\${${1}+isset}\" = 'isset' ]"
}

AssignAtVar()
{
    if ! IsVarSet "${1#@}"; then
        Fatal "output variable '${1#@}' is undefined"
    fi

    eval "${1#@}=\"\${2}\""
}

RemoveLagestPrefix()
{
    eval "AssignAtVar \"\${3}\" \"\${${1}##\${2}}\""
}

RemoveLargestSuffix()
{
    eval "AssignAtVar \"\${3}\" \"\${${1}%%\${2}}\""
}

Echo()
{
    Out "$*\n"
}

PrintBacktrace()
{
    local stackSize=${#FUNCNAME[@]}
    if [ ${stackSize} -gt 2 ]; then
        echo 'Backtrace:'
        for ((i=1; i<${stackSize}-1; i++)); do
            printf "%2d: %s:%d: %s()\n" "${i}" "${BASH_SOURCE[$i+1]}" "${BASH_LINENO[$i]}" "${FUNCNAME[$i]}"
        done
    fi
}

Fatal()
{
    Echo "\n<b><red>FATAL ERROR:</red> $*</reset>"

    PrintBacktrace

    exit 255
}

Warn()
{
    Echo "\n<b><white>Warning:</reset> $*\n"
}

Die()
{
    local res=''
    if [ -z "${EXIT_CODE:-}" ]; then
        res=1
    else
        res="${EXIT_CODE}"

        if [ ! "${res}" -eq "${res}" ] 2>/dev/null; then
            Fatal "illegal value '${res}' is used as exit code"
        fi

        if [ "${res}" -lt 0 ] || [ "${res}" -gt 255 ]; then
            Fatal "exit code '${res}' must be in interval [0; 255]"
        fi
    fi

    Echo "\n<b><red>ERROR:</reset> $*\n"

    exit "${res}"
}

DieIfRoot()
{
    if [ "${EUID}" -eq 0 ]; then
        Die "<b>don't run '<u>${0}</u>' with the root privileges!</b>"
    fi
}

# Getting non-clobbered output from command substitution
ExecCommand()
{
    # ${1}       -- output variable name
    # ${2}..{$n} -- command with arguments

    local s=''
    s="$(shift && { "$@"; } && printf '.')" || return $?
    AssignAtVar "${1}" "${s%.}"
}

ReadFile()
{
    # ${1} -- file to read
    # ${2} -- output variable name

    ExecCommand "${2}" "cat" "${1}"
}

# This function simply replaces every instance of «'» (single quote) within
# the string with «'\''» (single quote, backslash, single quote, single quote),
# then puts single quotes at the beginning and end of the string.
# Since the only character whose meaning is special within single quotes is
# the single quote character itself, this is totally safe.
# Trailing newlines are handled correctly, and the single quote at the end doubles
# as a safety character to prevent command substitution from clobbering
# the trailing newlines.
# See also: http://www.etalabs.net/sh_tricks.html
Quote()
{
    # ${1} -- input string
    # ${2} -- output variable name

    AssignAtVar "${2}" "$(printf "%s\n" "${1}" | sed "s:':'\\\\'':g;1s:^:':;\$s:\$:':")"
}

# Check a given string in ${2} match a given filename (glob) pattern in ${1}
FnMatch()
{
    case "${2}" in
        ${1}) return 0 ;;
           *) return 1 ;;
    esac
}

# Function()
# {
#     local fn="${1:?}"

#     if type "${fn}" | grep -Fiq 'function'; then
#         Fatal "'${fn}' is already defined as function name"
#     fi

#     eval "${fn}()
#     {
#         local fn='${fn}'
#         Fatal \"call to undefined function '\${fn}'\"
#     }"
# }
