Include 'color-codes'

__Colorize()
{
    local txt="${1}"
    local useColors="${2}"

    local res=''

    while :; do
        local suffix="${txt#*<}"
        if [ ${#suffix} = ${#txt} ]; then # '<' not found
            break
        fi

        local tag="${suffix%%>*}"
        if [ ${#tag} = ${#suffix} ]; then # '>' not found
            break
        fi

        local idxHead=0
        idxHead=$(( ${#suffix} + 1 ))
        res+="${txt:0:-${idxHead}}"

        if "${useColors}"; then
            case "${tag}" in
                'reset'|'/reset' ) res+="${SGR0}" ;;

                'black'   ) res+="${BLACK}"   ;;
                'red'     ) res+="${RED}"     ;;
                'green'   ) res+="${GREEN}"   ;;
                'yellow'  ) res+="${YELLOW}"  ;;
                'blue'    ) res+="${BLUE}"    ;;
                'magenta' ) res+="${MAGENTA}" ;;
                'cyan'    ) res+="${CYAN}"    ;;
                'white'   ) res+="${WHITE}"   ;;

                '/black'   ) res+="${DEFAULT_FG}" ;;
                '/red'     ) res+="${DEFAULT_FG}" ;;
                '/green'   ) res+="${DEFAULT_FG}" ;;
                '/yellow'  ) res+="${DEFAULT_FG}" ;;
                '/blue'    ) res+="${DEFAULT_FG}" ;;
                '/magenta' ) res+="${DEFAULT_FG}" ;;
                '/cyan'    ) res+="${DEFAULT_FG}" ;;
                '/white'   ) res+="${DEFAULT_FG}" ;;

                'black_bg'   ) res+="${BLACK_BG}"   ;;
                'red_bg'     ) res+="${RED_BG}"     ;;
                'green_bg'   ) res+="${GREEN_BG}"   ;;
                'yellow_bg'  ) res+="${YELLOW_BG}"  ;;
                'blue_bg'    ) res+="${BLUE_BG}"    ;;
                'magenta_bg' ) res+="${MAGENTA_BG}" ;;
                'cyan_bg'    ) res+="${CYAN_BG}"    ;;
                'white_bg'   ) res+="${WHITE_BG}"   ;;

                '/black_bg'   ) res+="${DEFAULT_BG}" ;;
                '/red_bg'     ) res+="${DEFAULT_BG}" ;;
                '/green_bg'   ) res+="${DEFAULT_BG}" ;;
                '/yellow_bg'  ) res+="${DEFAULT_BG}" ;;
                '/blue_bg'    ) res+="${DEFAULT_BG}" ;;
                '/magenta_bg' ) res+="${DEFAULT_BG}" ;;
                '/cyan_bg'    ) res+="${DEFAULT_BG}" ;;
                '/white_bg'   ) res+="${DEFAULT_BG}" ;;

                'b' ) res+="${TEXT_BOLD_ON}"  ;;
                '/b') res+="${TEXT_BOLD_OFF}" ;;

                'u' ) res+="${TEXT_UNDERLINED_ON}"  ;;
                '/u') res+="${TEXT_UNDERLINED_OFF}" ;;

                'blink' ) res+="${TEXT_BLINK_ON}"  ;;
                '/blink') res+="${TEXT_BLINK_OFF}" ;;

                'so' ) res+="${TEXT_STANDOUT_ON}"  ;;
                '/so') res+="${TEXT_STANDOUT_OFF}" ;;
            esac
        fi

        local idxTail=0
        idxTail=$(( ${#suffix} - ${#tag} - 1 ))
        if [ ${idxTail} -eq 0 ]; then # '>' is the latest char in the input string
            txt=''
            break
        fi

        txt="${txt:(-${idxTail})}"
    done

    res+="${txt}"

    res="${res//&lt;/<}" 
    res="${res//&gt;/>}" 
    res="${res//&amp;/&}" 

    AssignToVar "${3}" "${res}"
}

OutFmt()
{
    local fmt="${1}"
    shift

    local useColors=true
    if [ ! -t 1 ] || IsVarSet NO_COLOR; then # || IsVarSet ANSI_COLORS_DISABLED
        useColors=false
    fi

    local args=()

    while [ $# -gt 0 ]; do
        local s=''
        __Colorize "${1}" "${useColors}" @s
        shift
        args+=("${s}")
    done

   printf "${fmt}" "${args[@]}"
}

Out()
{
    OutFmt '%b' "$*"
}

OutCmdRes()
{
    local res="${1}"
    local cmd="${2}"

    local okFail=''

    if [ "${res}" = '0' ]; then
        okFail='<green>OK</green>'
    else
        okFail='<b><red>FAIL</red></b>'" (${res})"
    fi

    Out "${cmd} -- ${okFail}\n"
}
