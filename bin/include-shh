if [ -z "${__INCLUSE_SHH_INCLUDE_GUARD__:-}" ]; then
readonly __INCLUSE_SHH_INCLUDE_GUARD__=1

__GetIncludedSshModuleSpecs__()
{
    local _module="${1%.shh}"
    : "${_module:?Module name must be specified}"

    shift

    eval "${1#@}=\${_module}"
    
    local _hash=$(printf '%s' "${_module}" | md5sum | { IFS=' ' read -r hashValue fileName; printf '%s' "${hashValue}"; })
    eval "${2#@}=__INCLUDE_SHH_MODULE_${_hash}__"
}

# IsModuleIncluded()
# {
#     local incModuleName=''
#     local incGuardVarName=''
#     __GetIncludedSshModuleSpecs__ "${1}" @incModuleName @incGuardVarName

#     if ! eval "test -z \"\${${incGuardVarName}:-}\""; then
#         return 0 # Already included
#     else
#         return 1
#     fi
# }

StandaloneShh()
{
    : "${INCLUDE_SHH_STANDALONE:?INCLUDE_SHH_STANDALONE variable must be set and not null}"

    local incModuleName=''
    local incGuardVarName=''
    __GetIncludedSshModuleSpecs__ "${1}" @incModuleName @incGuardVarName

    eval "${incGuardVarName}=1"
}

Include()
{
    : "${INCLUDE_SHH_PATH:?The 'INCLUDE_SHH_PATH' variable must be set and not null}"

    local incModuleName=''
    local incGuardVarName=''
    __GetIncludedSshModuleSpecs__ "${1}" @incModuleName @incGuardVarName

    if eval "test \"\${${incGuardVarName}:-1}\" -le 0"; then
        # Already included or including in process now
        return
    fi

    if [ ! -z "${INCLUDE_SHH_STANDALONE:-}" ]; then
        eval : "\${${incGuardVarName}:?Module ${incModuleName} source code must be subtituted and marked as standalone by the StandaloneSh() function.}"
        return
    fi

    local path="${INCLUDE_SHH_PATH%%:*}"
    local rest="${INCLUDE_SHH_PATH#:*}"

    while :; do
        if [ "${path#/}" = "${path}" ]; then
            echo "ERROR: shh-include path must be an absolute path: '${path}'" 1>&2
            return 1
        fi

        local moduleFilePath="${path}/${incModuleName}.shh"
        if [ -f "${moduleFilePath}" ]; then
            eval "${incGuardVarName}=-1" # including in process
            . "${moduleFilePath}" ||
                { local res=$?; eval "${incGuardVarName}=${res}"; return ${res}; }
            eval "${incGuardVarName}=0"
            break
        fi

        path="${rest%%:*}"
        rest="${rest#:*}"
        if [ "${path}" = "${rest}" ]; then
            echo "ERROR: module '${incModuleName}' not found" 1>&2
            return 1
        fi
    done
}

InitializeShhPath()
{
    while :; do
        if [ -n "${INCLUDE_SHH_STANDALONE:-}" ]; then
            break
        fi

        if [ -n "${INCLUDE_SHH_PATH:-}" ]; then
            break
        fi

        local path=''
        if [ -n "${BASH_VERSION:-}" ]; then # in 'bash' we can use BASH_SOURCE
            path="${BASH_SOURCE[0]%/*}/include"
        else
            case "$-" in
                *i*) # shell is in interactive mode
                    path="${HOME}/bin/include"
                    ;;
                  *)
                    path="$(readlink -e "${0%/*}")/include" ||
                        { echo "ERROR: cannot autodetect shh-module include path by script file name: '${0}'" 1>&2; return 1; }
                    ;;
            esac
        fi

        if [ ! -d "${path}" ]; then
            echo "ERROR: autodetected shh-module include path does not exist: '${path}'"
            return 1
        fi

        readonly INCLUDE_SHH_PATH="${path}"

        break
    done

    InitializeShhPath() { :; } # collapsing function
}

InitializeShhPath || return $?
Include 'core'    || return $?

fi
# End of __INCLUSE_SHH_INCLUDE_GUARD__
